function [ isaac_metrics_cat ] = isaac_concatenate( isaac_metrics_in, varargin )
% isaac_metrics_cat = isaac_concatenate(isaac_metrics_in, 'name1', value1, ...)
%
%   Concatenates the metrics obtained by isaac_get_metrics from several
% datasets (subjects, sessions, treatments ...). Input is ideally a cell
% array with paths to files generated by isaac_get_metrics. 
%
%   Since metrics are either 1d-vectors (local metrics) or 2d-matrices,
% each metric is concatenated in the third dimension. If it is not provided
% the function will estimate it from the file names.
%
%   isaac_metrics_cat = isaac_concatenate(..., 'file_out', path_to_file)
% outputs the result to the specified path. Depending on the value of
% do_output_as_table, the output will be as a csv or a mat file.
%
% inputs:
%     (mandatory)
%
%     isaac_metrics_in:
%         Cell array with the paths to files generated by
%         isaac_get_metrics. It is ideally a cell array with paths to the
%         .mat files generated by isaac_get_metrics. Alternatively, it can
%         be an array of structs obtained by isaac_get_metrics.
%
%
%     (optional in name-value pairs)
%
%     'dataset_ids':
%         Cell array with identifications for each input (e.g. subject id,
%         session id, etc.), to be saved in the output structure and keep
%         track of the origin of the data. It must have the same size as
%         isaac_metrics_in. If not provided, the names of the input .mat
%         files will be used.
%
%     'file_out':
%         If speficied, the metrics will be saved to the file path
%         file_out. If not, the metrics will be output as a matlab
%         variable. If output_data_format is 'matrix', it will be saved as
%         a .mat file, and if it is 'big_table', it will be a .csv file.
%
%
% outputs:
%         isaac_metrics
%             The concatenated metrics, as a struct similar to the one
%             generated by isaac_get_metrics(), but with the metrics from
%             all the input files concatenated in the third
%             dimension.

% --------- parse arguments -----------------------------------------------
if rem(length(varargin), 2)
    warning('Odd number of optional arguments. Optional arguments must be in name-value pairs');
end

% default values:
file_out   = '';
dataset_ids = ''; % some identifier of each file/dataset to concatenate

% If any values were specified, change the value:
for k = 1:2:length(varargin)
    name_ = varargin{k};
    switch name_
        case 'file_out';
            file_out = varargin{k+1};
        case 'dataset_ids';
            dataset_ids = varargin{k+1};
        otherwise
            warning('Parameter ''%s'' not recognized, it will be ignored', name_);
    end
end
do_save = ~isempty(file_out);



% load all the input files in an array of structs:
switch class(isaac_metrics_in)
    case 'cell'
        % input is a cell of strings containing paths
        isaac_struct_array = cellfun(@load, isaac_metrics_in);
        
        if isempty(dataset_ids)
            % if no dataset_id were specified, the input file name is used
            [~, dataset_ids, ~] = cellfun(@fileparts, isaac_metrics_in, 'uni', false);
        end
    case 'struct'
        % input is already an array of structures
        isaac_struct_array = isaac_metrics_in;
        
        if isempty(dataset_ids)
            % if no dataset_id were specified, assign numbers.
            dataset_ids = strcat('dataset_', arrayfun(@(a) sprintf('%03d',a), 1:length(isaac_metrics_in), 'uni',false));
        end
end




% ---------- concatenate in the third dimension ---------------------------
isaac_metrics_cat = struct;
for fn1 = fieldnames(isaac_struct_array)'
    this_struct = [isaac_struct_array.(fn1{1})];
    for fn2 = fieldnames(this_struct)'
        isaac_metrics_cat.(fn1{1}).(fn2{1}) = cat(3, this_struct.(fn2{1}));
    end
end

% in principle all the regions will be the same for all subjects
isaac_metrics_cat.info.roi_names_x = isaac_metrics_cat.info.roi_names_x(:,:,1);
isaac_metrics_cat.info.roi_names_y = isaac_metrics_cat.info.roi_names_y(:,:,1);

% add dataset_ids field:
isaac_metrics_cat.info.dataset_id = dataset_ids;



% ---------------- save if asked to ---------------------------------------
if do_save
    is_dir_file_out = (file_out(end)=='/') || (file_out(end)=='\') || isdir(file_out);
    is_mat_file_out = ~isempty(regexp(file_out, '\.mat$'));
    if is_dir_file_out
        dir_out = file_out;
        file_out = fullfile(dir_out, sprintf('isaac_metrics_cat_%s.mat', datestr(now, 'yyyymmdd_HHMMSSFFF')));
        warning('Output file name ''%s'' is a directory. Data will be saved to ''%s''',...
            dir_out, file_out);
    else
        dir_out = fileparts(file_out);
        if ~is_mat_file_out
            file_out = [file_out '.mat'];
        end
    end
    
    % if output directory doesn't exist, create it.
    if ~exist(dir_out, 'dir')
        mkdir(dir_out);
    end
    save(file_out, '-struct', 'isaac_metrics_cat');
end
